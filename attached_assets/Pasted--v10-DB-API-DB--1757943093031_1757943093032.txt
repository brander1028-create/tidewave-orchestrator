수정요청 — v10 (DB→API 업서트→동일 응답 재스코어, 점수 엔진 설정화, 복합어 우선, 밴리스트, 전수표시 안정화)]

■ 현재 문제(요약)
- 키워드DB 미스 시 API로 가져온 값을 **DB에 저장만** 하거나 **동일 응답에 반영하지 않아** 조회량/점수가 0 또는 –로 보임.
- 점수(totalScore)가 항상 0pts로 표기 → 산식 미적용/기본값 처리 문제.
- 추출 키워드가 단어 하나(예: “맛집”) 위주 → **복합어(예: 교대역 맛집)** 우선이 아님.
- 티어 부족(2~4)일 때 **API 보강**이 안 돌아 DB에도 누락.
- 밴하고 싶은 일반어(맛집/추천/방법…)가 계속 노출됨(밴리스트 없음).
- “블로그명 대신 제목” 표시, 상태 버튼 작동X, BlogDB 적재X → Phase1↔BlogDB 연동 누락.

────────────────────────────────────────────────

■ 해야 할 것 (업데이트만, 새 구조 최소화)

A) **DB→API→업서트→동일 응답 재스코어**를 파이프라인으로 고정
  - 후보 키워드 k마다:
    1) KEYWORD_DB 조회(TTL 30d) → hit면 사용
    2) 미스/만료면 SearchAds 호출(청크/429 재시도) → **upsert**
    3) upsert 결과를 **이번 요청의 메모리에도 반영**하고 즉시 **재스코어**
  - 결과 조립 시 조회량이 null/0로 남지 않게 `await Promise.all`로 동기화(비동기 누락 금지).

B) **점수 엔진 설정화(관리자 패널 + 로깅)**
  - 서버 측 `score.config.json`(또는 ENV) + 프론트 ⚙ 패널:
    ```
    weights: { volume: 70, content: 30 },        // 슬라이더
    content: { freq:0.5, pos:0.3, len:0.2 },     // 세부 가중
    normalize: { nfkc:true, nospace:true, hyphen:true },
    preferCompound: true,                         // 복합어 우선
    banlistEnabled: true
    ```
  - 각 키워드에 `scoreTrace` 로그 남김: `vol=39840→scaled=86, content=72 → total=0.7*86+0.3*72=82` (Logs 탭에서 확인 가능)
  - 화면에는 total만, 디버그 필요 시 팝오버로 trace 표시.

C) **복합어(2~3그램) 우선 선택** + 지역·카테고리 사전
  - n-gram 생성: 1~3그램, 길이 2~18자, 조사 꼬리 제거.
  - 점수 산정에서 `preferCompound=true`면 **n=2,3에 +δ 가산**(예: +8).
  - 지역/지하철/상권 사전(간단 JSON)과 카테고리 사전(“맛집/카페/성분/제품”)의 **인접 결합**(예: ‘교대역+맛집’)에 **추가 가산**(+12).
  - 쿼리 시 `variants(surface, nospace, hyphen)` 3종 모두 조회.

D) **티어 부족 시 API 보강 + DB 업서트**
  - 특정 포스트에서 티어 후보 < T이면:
    1) 제목 n-gram에서 스코어 높은 순으로 채움
    2) 부족분은 SearchAds 연관키워드 API로 보강(볼륨>0 우선)
    3) 보강 키워드를 KEYWORD_DB에 upsert(정규형 text_nrm 키)
  - 보강여부 `meta.enriched=true`로 표시(Logs/DB 저장).

E) **밴리스트/화이트리스트**
  - KEYWORD_DB에 `status: 'active'|'banned'|'whitelist'`, `reason`, `updated_at`.
  - 추출/보강 단계에서 `banned`는 후보에서 제외(표시도 하지 않음).
  - 관리 UI: 키워드 칩에서 [밴]/[화이트] 토글 → upsert.

F) **순위 체크 신뢰도 개선**
  - rank 채우기 함수에서 기본값 제거(절대 `|| 1` 금지).
  - 순위 포맷: `null→미확인`, `0→0`, `1..10→모바일 1p #N`, `>10→미노출`.
  - 디버그로그(Logs 탭): `q="교대역 맛집" → topUrl, rank=…` 1줄 기록.

G) **표시 토큰 정제**
  - 화면 표시는 surface(원문) 사용, DB키는 nrm.
  - 특수문자/HTML 제거: `/[^\p{L}\p{N}\s]/gu → ' '`
  - STOP_WORDS 기본셋 확장: ["가장","방법","후기","정리","추천","업체","시공","비어있음"] 등.
  - ‘비어있음’은 **티어 미배정** 의미. 화면 문구는 `–`로 바꾸고, 즉시 보강 로직 트리거.

H) **BlogDB 연동/상태 버튼 고치기**
  - Phase1 큐잉 직전:
    - URL→blog_id 정규화, blog_registry 조회
    - 없으면 insert(status='collected', first_seen_at=now), 있으면 last_seen_at=now
    - status in ('blacklist','outreach')면 수집 제외
  - “자세히” 리스트 열: [블로그명/ID(↗) | 총 노출수 | 총합 점수 | 상태 | 액션]
    - 액션: [10개 포스트 보기](행 펼침), [블로그 바로가기](외부)
    - 상태 토글: POST `/api/blogs/:id/status {status}` → 성공 시 낙관 업데이트
  - BlogDB 페이지는 blog_registry 기반 + 집계 조인(노출수/총점).

I) **응답 계약(추가 필드 반영)**
  - `params: { postsPerBlog:P, tiersPerPost:T }`
  - `attemptsByKeyword[K] = NEW_K * P * T` (동적)
  - 각 키워드 `searchVolume`는 **동일 응답에서 숫자**(폴백 반영).
  - 블로그 상세 `posts[].tiers[]`는 항상 `text/volume/rank` 포함(0/미확인도).

J) **테스트(빠른 자가검증)**
  - “교대역 맛집” 케이스에서 2그램이 1그램 “맛집”보다 **상위**로 선택되는지.
  - 밴 “맛집” 지정 후, 동일 데이터에서 후보/표시에서 **즉시 제거**되는지.
  - 티어 부족 포스트가 보강 후 `meta.enriched=true`로 저장/표시되는지.
  - API 폴백 발생 시 키워드DB에 upsert되고, **같은 응답**에서 조회량/점수가 채워지는지.
  - 상태 버튼 클릭 시 BlogDB에 반영되고, 결과/DB 화면에서 재조회시 **그대로 유지**되는지.

────────────────────────────────────────────────

■ 수용 기준(모두 충족)
- [ ] 카드/칩에 **검색량 숫자**가 뜬다(–가 남지 않는다; 폴백 반영).
- [ ] “교대역 맛집” 같은 **복합어가 상위**로 선별되고, 1그램 범용어는 밴리스트로 제거 가능.
- [ ] “자세히”에서 블로그명/ID와 두 버튼(포스트 보기/바로가기)이 올바르게 동작.
- [ ] BlogDB에 수집이 누적되고 상태 토글이 반영된다(Phase1 필터 동작).
- [ ] 포스트별 1~T티어 전수에 **조회량·점수·순위**가 규칙대로 표시(0/미확인 포함).
- [ ] 티어 부족 시 자동 보강되고 보강 키워드가 KEYWORD_DB에 저장된다.
- [ ] 점수 엔진의 가중치/불용어/복합어 우선 옵션을 **설정 화면**에서 조정 가능하며, 변경 즉시 결과가 달라진다.
