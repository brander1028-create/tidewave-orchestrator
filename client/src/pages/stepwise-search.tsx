import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  Search, 
  Database, 
  TrendingUp, 
  CheckCircle, 
  Circle,
  Play,
  Loader2,
  FileText,
  BarChart3,
  Square,
  ExternalLink
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";

export default function StepwiseSearchPage() {
  const [keyword, setKeyword] = useState("");
  const [currentStep, setCurrentStep] = useState(1);
  const [selectedTab, setSelectedTab] = useState("step1");
  const [step1Loading, setStep1Loading] = useState(false);
  const [step2Loading, setStep2Loading] = useState(false);
  const [step3Loading, setStep3Loading] = useState(false);
  const { toast } = useToast();
  
  // ÏÉÅÌÉú Îç∞Ïù¥ÌÑ∞
  const [step1Blogs, setStep1Blogs] = useState<any[]>([]);
  const [step2Blogs, setStep2Blogs] = useState<any[]>([]);
  const [step2Results, setStep2Results] = useState<any[]>([]);
  const [step3Blogs, setStep3Blogs] = useState<any[]>([]);
  const [step3Results, setStep3Results] = useState<any[]>([]);
  const [jobId, setJobId] = useState<string | null>(null);

  // ÏûëÏóÖ Ï∑®ÏÜå Ìï®Ïàò
  const handleCancelJob = async () => {
    if (!jobId) return;
    
    try {
      console.log(`üõë [Frontend] Job ${jobId} Ï∑®ÏÜå ÏöîÏ≤≠`);
      
      const res = await apiRequest('POST', `/api/serp/jobs/${jobId}/cancel`);
      const response = await res.json();
      
      console.log(`‚úÖ [Frontend] Job ${jobId} Ï∑®ÏÜå ÏôÑÎ£å`);
      
      // UI ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
      setStep1Loading(false);
      setStep2Loading(false);
      setStep3Loading(false);
      
      toast({
        title: "Î∂ÑÏÑù Ï§ëÎã®Îê®",
        description: "Î∂ÑÏÑùÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï§ëÎã®ÎêòÏóàÏäµÎãàÎã§",
        variant: "default"
      });
      
    } catch (error) {
      console.error("‚ùå [Frontend] Job Ï∑®ÏÜå Ïã§Ìå®:", error);
      toast({
        title: "Ï∑®ÏÜå Ïã§Ìå®",
        description: "Î∂ÑÏÑù Ï§ëÎã® Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§",
        variant: "destructive"
      });
    }
  };

  const handleStep1Search = async () => {
    if (!keyword.trim()) return;
    
    setStep1Loading(true);
    try {
      console.log(`üîç [Frontend] 1Îã®Í≥Ñ ÏãúÏûë: "${keyword}"`);
      
      // 1Îã®Í≥Ñ job ÏãúÏûë
      const res = await apiRequest('POST', '/api/stepwise-search/step1', {
        keyword: keyword.trim()
      });
      const response = await res.json();

      if (response.blogs && response.blogs.length > 0) {
        setStep1Blogs(response.blogs);
        setJobId(response.jobId);
        setCurrentStep(2);
        console.log(`‚úÖ [Frontend] 1Îã®Í≥Ñ ÏôÑÎ£å: ${response.blogs.length}Í∞ú Î∏îÎ°úÍ∑∏ ÏàòÏßë`);
        
        toast({
          title: "Î∏îÎ°úÍ∑∏ ÏàòÏßë ÏôÑÎ£å",
          description: `${response.blogs.length}Í∞úÏùò Î∏îÎ°úÍ∑∏Î•º Î∞úÍ≤¨ÌñàÏäµÎãàÎã§`,
        });
      } else {
        toast({
          title: "Í≤ÄÏÉâ Í≤∞Í≥º ÏóÜÏùå",
          description: "Ìï¥Îãπ ÌÇ§ÏõåÎìúÎ°ú Î∏îÎ°úÍ∑∏Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error("‚ùå [Frontend] 1Îã®Í≥Ñ Í≤ÄÏÉâ Ïã§Ìå®:", error);
      toast({
        title: "Í≤ÄÏÉâ Ïã§Ìå®",
        description: "Î∏îÎ°úÍ∑∏ Í≤ÄÏÉâ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§",
        variant: "destructive"
      });
    } finally {
      setStep1Loading(false);
    }
  };

  // ÏùºÍ¥Ñ ÌôúÏÑ±Ìôî Ìï®Ïàò
  const handleBulkStep2Analysis = async () => {
    if (!jobId) {
      toast({
        title: "ÏûëÏóÖ ID ÏóÜÏùå",
        description: "Î®ºÏ†Ä 1Îã®Í≥Ñ Î∏îÎ°úÍ∑∏ ÏàòÏßëÏùÑ ÏôÑÎ£åÌï¥Ï£ºÏÑ∏Ïöî",
        variant: "destructive",
      });
      return;
    }

    setStep2Loading(true);
    try {
      // ÏïÑÏßÅ ÌÇ§ÏõåÎìú Î∂ÑÏÑùÏù¥ ÏïàÎêú Î∏îÎ°úÍ∑∏Îì§Îßå Ï≤òÎ¶¨
      const blogsToProcess = step1Blogs.filter(blog => !step2Blogs.includes(blog.id));
      
      if (blogsToProcess.length === 0) {
        toast({
          title: "Ï≤òÎ¶¨Ìï† Î∏îÎ°úÍ∑∏ ÏóÜÏùå",
          description: "Î™®Îì† Î∏îÎ°úÍ∑∏Í∞Ä Ïù¥ÎØ∏ ÌÇ§ÏõåÎìú Î∂ÑÏÑùÎêòÏóàÏäµÎãàÎã§",
        });
        return;
      }
      
      console.log(`üîÑ [Frontend] ÏùºÍ¥Ñ ÌÇ§ÏõåÎìú Î∂ÑÏÑù ÏãúÏûë: ${blogsToProcess.length}Í∞ú Î∏îÎ°úÍ∑∏`);
      
      for (const blog of blogsToProcess) {
        try {
          console.log(`üîÑ [Frontend] Î∏îÎ°úÍ∑∏ "${blog.blogName}" ÌÇ§ÏõåÎìú Î∂ÑÏÑù Ï§ë...`);
          
          // localStorageÏóêÏÑú ÌÇ§ÏõåÎìú ÏÑ†Ï†ï ÏÑ§Ï†ïÍ∞í ÏùΩÏñ¥Ïò§Í∏∞
          const savedSettings = localStorage.getItem('keywordSelectionSettings');
          const keywordSettings = savedSettings ? JSON.parse(savedSettings) : null;
          
          const res = await apiRequest('POST', '/api/stepwise-search/step2', {
            jobId: jobId,
            blogIds: [blog.id],
            keywordSettings: keywordSettings
          });
          
          if (!res.ok) {
            throw new Error(`API ÏöîÏ≤≠ Ïã§Ìå®: ${res.status}`);
          }
          
          const response = await res.json();
          
          // ÏÑ±Í≥µ Ïãú step2BlogsÏôÄ step2ResultsÏóê Ï∂îÍ∞Ä
          setStep2Blogs(prev => [...prev, blog.id]);
          if (response.results && response.results.length > 0) {
            setStep2Results(prev => [...prev, ...response.results]);
          }
          
          console.log(`‚úÖ [Frontend] Î∏îÎ°úÍ∑∏ "${blog.blogName}" ÌÇ§ÏõåÎìú Î∂ÑÏÑù ÏôÑÎ£å`);
          
          // Ïû†Ïãú ÎåÄÍ∏∞ (ÏÑúÎ≤Ñ Î∂ÄÌïò Î∞©ÏßÄ)
          await new Promise(resolve => setTimeout(resolve, 1000));
          
        } catch (error) {
          console.error(`‚ùå [Frontend] Î∏îÎ°úÍ∑∏ "${blog.blogName}" ÌÇ§ÏõåÎìú Î∂ÑÏÑù Ïã§Ìå®:`, error);
          toast({
            title: `${blog.blogName} ÌÇ§ÏõåÎìú Î∂ÑÏÑù Ïã§Ìå®`,
            description: `Ïò§Î•ò: ${error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`,
            variant: "destructive"
          });
        }
      }
      
      console.log(`üéâ [Frontend] ÏùºÍ¥Ñ ÌÇ§ÏõåÎìú Î∂ÑÏÑù ÏôÑÎ£å: ${blogsToProcess.length}Í∞ú Ï≤òÎ¶¨Îê®`);
      
      toast({
        title: "ÏùºÍ¥Ñ ÌÇ§ÏõåÎìú Î∂ÑÏÑù ÏôÑÎ£å",
        description: `${blogsToProcess.length}Í∞ú Î∏îÎ°úÍ∑∏Ïùò ÌÇ§ÏõåÎìúÍ∞Ä Î∂ÑÏÑùÎêòÏóàÏäµÎãàÎã§`,
      });
      
    } catch (error) {
      console.error("‚ùå [Frontend] ÏùºÍ¥Ñ ÌÇ§ÏõåÎìú Î∂ÑÏÑù Ïã§Ìå®:", error);
      toast({
        title: "ÏùºÍ¥Ñ ÌÇ§ÏõåÎìú Î∂ÑÏÑù Ïã§Ìå®", 
        description: "ÌÇ§ÏõåÎìú Î∂ÑÏÑù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§",
        variant: "destructive"
      });
    } finally {
      setStep2Loading(false);
    }
  };

  const handleBulkActivation = async () => {
    if (!jobId) {
      toast({
        title: "ÏûëÏóÖ ID ÏóÜÏùå",
        description: "Î®ºÏ†Ä 1Îã®Í≥Ñ Î∏îÎ°úÍ∑∏ ÏàòÏßëÏùÑ ÏôÑÎ£åÌï¥Ï£ºÏÑ∏Ïöî",
        variant: "destructive",
      });
      return;
    }

    setStep2Loading(true);
    try {
      const totalBlogs = step1Blogs.length;
      const activatedBlogs = step2Blogs.length;
      
      console.log(`üîÑ [Frontend] ÏùºÍ¥Ñ ÌôúÏÑ±Ìôî ÏãúÏûë: ${totalBlogs - activatedBlogs}Í∞ú Î∏îÎ°úÍ∑∏`);
      
      // ÏïÑÏßÅ ÌôúÏÑ±ÌôîÎêòÏßÄ ÏïäÏùÄ Î∏îÎ°úÍ∑∏Îì§Îßå Ï≤òÎ¶¨
      const blogsToProcess = step1Blogs.filter(blog => !step2Blogs.includes(blog.id));
      
      for (const blog of blogsToProcess) {
        try {
          console.log(`üîÑ [Frontend] Î∏îÎ°úÍ∑∏ "${blog.blogName}" ÌôúÏÑ±Ìôî Ï§ë...`);
          
          // Î®ºÏ†Ä Ï†úÎ™© ÏàòÏßë Ïó¨Î∂Ä ÌôïÏù∏
          const titleCheckRes = await apiRequest('GET', `/api/stepwise-db/step2?jobId=${jobId}&blogId=${blog.id}`);
          let hasTitles = false;
          
          if (titleCheckRes.ok) {
            const titleData = await titleCheckRes.json();
            hasTitles = titleData.data && titleData.data.length > 0;
          }
          
          if (!hasTitles) {
            console.log(`‚ö†Ô∏è [Frontend] Î∏îÎ°úÍ∑∏ "${blog.blogName}" Ï†úÎ™©Ïù¥ ÏóÜÏñ¥ Ïä§ÌÇµ`);
            toast({
              title: `${blog.blogName} ÌÇ§ÏõåÎìú Î∂ÑÏÑù Í±¥ÎÑàÎúÄ`,
              description: "Î®ºÏ†Ä 'Ï†úÎ™© Í∏ÅÏñ¥Ïò§Í∏∞' Î≤ÑÌäºÏùÑ ÎàåÎü¨ Î∏îÎ°úÍ∑∏ Ìè¨Ïä§Ìä∏Î•º ÏàòÏßëÌï¥Ï£ºÏÑ∏Ïöî",
              variant: "default"
            });
            continue;
          }
          
          const res = await apiRequest('POST', `/api/stepwise-search/step2`, {
            jobId,
            blogIds: [blog.id]
          });
          
          console.log(`üîç [Debug] Response status: ${res.status}`);
          console.log(`üîç [Debug] Response headers:`, res.headers.get('content-type'));
          
          // ÏùëÎãµ ÌÖçÏä§Ìä∏Î•º Î®ºÏ†Ä ÏùΩÏñ¥ÏÑú ÌôïÏù∏
          const responseText = await res.text();
          console.log(`üîç [Debug] Response body (first 200 chars):`, responseText.substring(0, 200));
          
          let response;
          try {
            response = JSON.parse(responseText);
            console.log(`üîç [Debug] JSON ÌååÏã± ÏÑ±Í≥µ:`, response);
          } catch (parseError) {
            console.error(`‚ùå [Debug] JSON ÌååÏã± Ïã§Ìå®:`, parseError);
            console.error(`‚ùå [Debug] Ï†ÑÏ≤¥ ÏùëÎãµ:`, responseText);
            throw new Error(`ÏÑúÎ≤Ñ ÏùëÎãµÏù¥ JSON ÌòïÏãùÏù¥ ÏïÑÎãôÎãàÎã§: ${responseText.substring(0, 100)}`);
          }
          
          // ÏÑ±Í≥µ Ïãú step2BlogsÏôÄ step2ResultsÏóê Ï∂îÍ∞Ä
          setStep2Blogs(prev => [...prev, blog.id]);
          if (response.results && response.results.length > 0) {
            setStep2Results(prev => [...prev, ...response.results]);
          }
          
          console.log(`‚úÖ [Frontend] Î∏îÎ°úÍ∑∏ "${blog.blogName}" ÌôúÏÑ±Ìôî ÏôÑÎ£å`);
          
          // Ïû†Ïãú ÎåÄÍ∏∞ (ÏÑúÎ≤Ñ Î∂ÄÌïò Î∞©ÏßÄ)
          await new Promise(resolve => setTimeout(resolve, 500));
          
        } catch (error: any) {
          console.error(`‚ùå [Frontend] Î∏îÎ°úÍ∑∏ "${blog.blogName}" ÌôúÏÑ±Ìôî Ïã§Ìå®:`, error);
          
          // Ï†úÎ™©Ïù¥ ÏóÜÎäî Í≤ΩÏö∞ ÏπúÌôîÏ†ÅÏù∏ Î©îÏãúÏßÄ
          if (error.message && error.message.includes('Ï†úÎ™©')) {
            toast({
              title: `${blog.blogName} ÌÇ§ÏõåÎìú Î∂ÑÏÑù Î∂àÍ∞Ä`,
              description: "Î®ºÏ†Ä 'Ï†úÎ™© Í∏ÅÏñ¥Ïò§Í∏∞' Î≤ÑÌäºÏùÑ ÎàåÎü¨ Î∏îÎ°úÍ∑∏ Ìè¨Ïä§Ìä∏Î•º ÏàòÏßëÌï¥Ï£ºÏÑ∏Ïöî",
              variant: "default"
            });
          } else {
            toast({
              title: `${blog.blogName} ÌôúÏÑ±Ìôî Ïã§Ìå®`,
              description: `Ïò§Î•ò: ${error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`,
              variant: "destructive"
            });
          }
        }
      }
      
      console.log(`üéâ [Frontend] ÏùºÍ¥Ñ ÌôúÏÑ±Ìôî ÏôÑÎ£å: ${blogsToProcess.length}Í∞ú Ï≤òÎ¶¨Îê®`);
      
      // Step2 ÌÉ≠ÏúºÎ°ú ÏûêÎèô Ï†ÑÌôò
      setSelectedTab("step2");
      
      toast({
        title: "ÏùºÍ¥Ñ ÌôúÏÑ±Ìôî ÏôÑÎ£å",
        description: `${blogsToProcess.length}Í∞ú Î∏îÎ°úÍ∑∏Í∞Ä ÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§`,
      });
      
    } catch (error) {
      console.error("‚ùå [Frontend] ÏùºÍ¥Ñ ÌôúÏÑ±Ìôî Ïã§Ìå®:", error);
      toast({
        title: "ÏùºÍ¥Ñ ÌôúÏÑ±Ìôî Ïã§Ìå®", 
        description: "Î∏îÎ°úÍ∑∏ ÌôúÏÑ±Ìôî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§",
        variant: "destructive"
      });
    } finally {
      setStep2Loading(false);
    }
  };

  // Ï†úÎ™© Ïä§ÌÅ¨ÎûòÌïë Ìï®Ïàò
  const handleTitleScraping = async () => {
    if (!jobId) {
      toast({
        title: "ÏûëÏóÖ ID ÏóÜÏùå",
        description: "Î®ºÏ†Ä 1Îã®Í≥Ñ Î∏îÎ°úÍ∑∏ ÏàòÏßëÏùÑ ÏôÑÎ£åÌï¥Ï£ºÏÑ∏Ïöî",
        variant: "destructive",
      });
      return;
    }
    
    try {
      console.log(`üîç [Frontend] Ï†úÎ™© Ïä§ÌÅ¨ÎûòÌïë ÏãúÏûë`);
      
      const res = await apiRequest('POST', '/api/stepwise-search/scrape-titles', {
        jobId: jobId
      });
      const response = await res.json();
      
      if (response.results && response.results.length > 0) {
        // UIÏóê Ï†úÎ™© ÏóÖÎç∞Ïù¥Ìä∏ Î∞òÏòÅ
        const updatedBlogs = step1Blogs.map(blog => {
          const scraped = response.results.find((r: any) => r.id === blog.id);
          if (scraped && scraped.title) {
            return { ...blog, title: scraped.title };
          }
          return blog;
        });
        
        setStep1Blogs(updatedBlogs);
        
        console.log(`‚úÖ [Frontend] Ï†úÎ™© Ïä§ÌÅ¨ÎûòÌïë ÏôÑÎ£å: ÏÑ±Í≥µ ${response.summary.scraped}Í∞ú, Ïã§Ìå® ${response.summary.failed}Í∞ú`);
        
        toast({
          title: "Ï†úÎ™© Ïä§ÌÅ¨ÎûòÌïë ÏôÑÎ£å",
          description: `${response.summary.scraped}Í∞ú Ï†úÎ™©ÏùÑ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Í∞ÄÏ†∏ÏôîÏäµÎãàÎã§`,
        });
      } else {
        toast({
          title: "Ïä§ÌÅ¨ÎûòÌïë Í≤∞Í≥º ÏóÜÏùå",
          description: "ÏÉàÎ°ú Í∞ÄÏ†∏Ïò¨ Ï†úÎ™©Ïù¥ ÏóÜÏäµÎãàÎã§",
          variant: "default"
        });
      }
    } catch (error) {
      console.error("‚ùå [Frontend] Ï†úÎ™© Ïä§ÌÅ¨ÎûòÌïë Ïã§Ìå®:", error);
      toast({
        title: "Ïä§ÌÅ¨ÎûòÌïë Ïã§Ìå®",
        description: "Ï†úÎ™© Ïä§ÌÅ¨ÎûòÌïë Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§",
        variant: "destructive"
      });
    }
  };

  const handleStep2Process = async (blogId: string) => {
    // Guard: jobIdÍ∞Ä ÏóÜÏúºÎ©¥ 2Îã®Í≥Ñ Ïã§Ìñâ Î∂àÍ∞Ä
    if (!jobId) {
      toast({
        title: "ÏûëÏóÖ ID ÏóÜÏùå",
        description: "Î®ºÏ†Ä 1Îã®Í≥Ñ Î∏îÎ°úÍ∑∏ ÏàòÏßëÏùÑ ÏôÑÎ£åÌï¥Ï£ºÏÑ∏Ïöî",
        variant: "destructive",
      });
      return;
    }

    setStep2Loading(true);
    setSelectedTab("step2"); // ÏûêÎèôÏúºÎ°ú 2Îã®Í≥Ñ ÌÉ≠ÏúºÎ°ú Ï†ÑÌôò
    try {
      console.log(`üîç [Frontend] 2Îã®Í≥Ñ ÏãúÏûë: "${blogId}"`);
      
      // ÌÇ§ÏõåÎìú Í¥ÄÎ¶¨ ÏãúÏä§ÌÖúÏùÑ ÌôúÏö©ÌïòÏó¨ ÏûêÎèôÏúºÎ°ú Ï≤òÎ¶¨Îê©ÎãàÎã§.
      
      // localStorageÏóêÏÑú ÌÇ§ÏõåÎìú ÏÑ†Ï†ï ÏÑ§Ï†ïÍ∞í ÏùΩÏñ¥Ïò§Í∏∞
      const savedSettings = localStorage.getItem('keywordSelectionSettings');
      const keywordSettings = savedSettings ? JSON.parse(savedSettings) : null;
      
      const res = await apiRequest('POST', '/api/stepwise-search/step2', {
        jobId: jobId,
        blogIds: [blogId], // Îã®Ïùº Î∏îÎ°úÍ∑∏Î•º Î∞∞Ïó¥Î°ú Ï†ÑÎã¨
        keywordSettings: keywordSettings // ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ïÍ∞í Ï†ÑÎã¨
      });
      
      console.log(`üîç [Debug Individual] Response status: ${res.status}`);
      console.log(`üîç [Debug Individual] Response headers:`, res.headers.get('content-type'));
      
      // ÏùëÎãµ ÌÖçÏä§Ìä∏Î•º Î®ºÏ†Ä ÏùΩÏñ¥ÏÑú ÌôïÏù∏
      const responseText = await res.text();
      console.log(`üîç [Debug Individual] Response body (first 200 chars):`, responseText.substring(0, 200));
      
      let response;
      try {
        response = JSON.parse(responseText);
        console.log(`üîç [Debug Individual] JSON ÌååÏã± ÏÑ±Í≥µ:`, response);
      } catch (parseError) {
        console.error(`‚ùå [Debug Individual] JSON ÌååÏã± Ïã§Ìå®:`, parseError);
        console.error(`‚ùå [Debug Individual] Ï†ÑÏ≤¥ ÏùëÎãµ:`, responseText);
        throw new Error(`ÏÑúÎ≤Ñ ÏùëÎãµÏù¥ JSON ÌòïÏãùÏù¥ ÏïÑÎãôÎãàÎã§: ${responseText.substring(0, 100)}`);
      }

      if (response.results && response.results.length > 0) {
        setStep2Blogs(prev => [...prev, blogId]);
        setStep2Results(prev => [...prev, ...response.results]);
        if (currentStep < 3) setCurrentStep(3);
        toast({
          title: "ÌÇ§ÏõåÎìú Î∂ÑÏÑù ÏôÑÎ£å",
          description: `${response.message}`,
        });
        console.log(`‚úÖ [Frontend] 2Îã®Í≥Ñ ÏôÑÎ£å:`, response.results);
      } else {
        toast({
          title: "ÌÇ§ÏõåÎìú Î∂ÑÏÑù Ïã§Ìå®",
          description: "ÌÇ§ÏõåÎìúÎ•º Ï∂îÏ∂úÌï† Ïàò ÏóÜÏäµÎãàÎã§",
          variant: "destructive",
        });
      }

      setStep2Loading(false);
    } catch (error) {
      console.error("‚ùå [Frontend] 2Îã®Í≥Ñ Ï≤òÎ¶¨ Ïã§Ìå®:", error);
      toast({
        title: "ÌÇ§ÏõåÎìú Î∂ÑÏÑù Ïã§Ìå®",
        description: "ÌÇ§ÏõåÎìú Î∂ÑÏÑù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§",
        variant: "destructive",
      });
      setStep2Loading(false);
    }
  };

  const handleStep3Check = async (blogId: string) => {
    // Guard: jobIdÍ∞Ä ÏóÜÏúºÎ©¥ 3Îã®Í≥Ñ Ïã§Ìñâ Î∂àÍ∞Ä
    if (!jobId) {
      toast({
        title: "ÏûëÏóÖ ID ÏóÜÏùå",
        description: "Î®ºÏ†Ä 1Îã®Í≥Ñ Î∏îÎ°úÍ∑∏ ÏàòÏßëÏùÑ ÏôÑÎ£åÌï¥Ï£ºÏÑ∏Ïöî",
        variant: "destructive",
      });
      return;
    }

    setStep3Loading(true);
    setSelectedTab("step3"); // ÏûêÎèôÏúºÎ°ú 3Îã®Í≥Ñ ÌÉ≠ÏúºÎ°ú Ï†ÑÌôò
    try {
      console.log(`üéØ [Frontend] 3Îã®Í≥Ñ ÏãúÏûë: "${blogId}"`);
      
      const res = await apiRequest('POST', '/api/stepwise-search/step3', {
        jobId: jobId,
        blogIds: [blogId] // Îã®Ïùº Î∏îÎ°úÍ∑∏Î•º Î∞∞Ïó¥Î°ú Ï†ÑÎã¨
      });
      const response = await res.json();

      if (response.results && response.results.length > 0) {
        setStep3Blogs(prev => [...prev, blogId]);
        setStep3Results(prev => [...prev, ...response.results]);
        toast({
          title: "ÏàúÏúÑ ÌôïÏù∏ ÏôÑÎ£å",
          description: `${response.message}`,
        });
        console.log(`‚úÖ [Frontend] 3Îã®Í≥Ñ ÏôÑÎ£å:`, response.results);
      } else {
        toast({
          title: "ÏàúÏúÑ ÌôïÏù∏ Ïã§Ìå®",
          description: "Î∏îÎ°úÍ∑∏ ÏàúÏúÑÎ•º ÌôïÏù∏Ìï† Ïàò ÏóÜÏäµÎãàÎã§",
          variant: "destructive",
        });
      }

      setStep3Loading(false);
    } catch (error) {
      console.error("‚ùå [Frontend] 3Îã®Í≥Ñ Ï≤òÎ¶¨ Ïã§Ìå®:", error);
      toast({
        title: "ÏàúÏúÑ ÌôïÏù∏ Ïã§Ìå®",
        description: "ÏàúÏúÑ ÌôïÏù∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§",
        variant: "destructive",
      });
      setStep3Loading(false);
    }
  };

  return (
    <div className="p-6 max-w-7xl mx-auto space-y-6">
      {/* Ìó§Îçî */}
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Îã®Í≥ÑÎ≥Ñ Í≤ÄÏÉâ</h1>
        <p className="text-muted-foreground mt-2">
          3Îã®Í≥Ñ Î∏îÎ°úÍ∑∏ Î∂ÑÏÑù ÌîÑÎ°úÏÑ∏Ïä§: ÌÇ§ÏõåÎìú Í≤ÄÏÉâ ‚Üí API ÌôúÏÑ±Ìôî ‚Üí ÏßÄÏàò ÌôïÏù∏
        </p>
      </div>

      {/* ÌîÑÎ°úÏÑ∏Ïä§ Îã®Í≥Ñ ÌëúÏãú */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <BarChart3 className="h-5 w-5" />
            Î∂ÑÏÑù ÌîÑÎ°úÏÑ∏Ïä§
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center gap-4">
            <div className={`flex items-center gap-2 ${currentStep >= 1 ? 'text-blue-600' : 'text-gray-400'}`}>
              {step1Blogs.length > 0 ? <CheckCircle className="h-5 w-5 text-green-600" /> : <Circle className="h-5 w-5" />}
              <span className="font-medium">1Îã®Í≥Ñ: Î∏îÎ°úÍ∑∏ ÏàòÏßë</span>
            </div>
            <div className="h-px bg-gray-300 flex-1" />
            <div className={`flex items-center gap-2 ${currentStep >= 2 ? 'text-blue-600' : 'text-gray-400'}`}>
              {step2Blogs.length > 0 ? <CheckCircle className="h-5 w-5 text-green-600" /> : <Circle className="h-5 w-5" />}
              <span className="font-medium">2Îã®Í≥Ñ: ÌÇ§ÏõåÎìú API</span>
            </div>
            <div className="h-px bg-gray-300 flex-1" />
            <div className={`flex items-center gap-2 ${currentStep >= 3 ? 'text-blue-600' : 'text-gray-400'}`}>
              {step3Blogs.length > 0 ? <CheckCircle className="h-5 w-5 text-green-600" /> : <Circle className="h-5 w-5" />}
              <span className="font-medium">3Îã®Í≥Ñ: ÏßÄÏàò ÌôïÏù∏</span>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* ÌÇ§ÏõåÎìú ÏûÖÎ†• */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Search className="h-5 w-5" />
            ÌÇ§ÏõåÎìú Í≤ÄÏÉâ
          </CardTitle>
          <CardDescription>
            M.NAVER.COMÏóêÏÑú ÌÇ§ÏõåÎìúÎ•º Í≤ÄÏÉâÌïòÏó¨ Ï≤´ÌéòÏù¥ÏßÄ Î∏îÎ°úÍ∑∏Î•º ÏàòÏßëÌï©ÎãàÎã§
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex gap-4">
            <Input
              placeholder="Í≤ÄÏÉâÌï† ÌÇ§ÏõåÎìúÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
              value={keyword}
              onChange={(e) => setKeyword(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleStep1Search()}
              data-testid="input-keyword"
            />
            <Button 
              onClick={step1Loading ? handleCancelJob : handleStep1Search}
              disabled={!step1Loading && !keyword.trim()}
              data-testid={step1Loading ? "button-cancel-analysis" : "button-step1-search"}
              variant={step1Loading ? "destructive" : "default"}
            >
              {step1Loading ? (
                <>
                  <Square className="h-4 w-4 mr-2" />
                  Î∂ÑÏÑù Ï§ëÎã®
                </>
              ) : (
                <>
                  <Play className="h-4 w-4 mr-2" />
                  1Îã®Í≥Ñ ÏãúÏûë
                </>
              )}
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* ÌÉ≠ÏúºÎ°ú Í∞Å Îã®Í≥Ñ Í≤∞Í≥º ÌëúÏãú */}
      <Tabs value={selectedTab} onValueChange={setSelectedTab} className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="step1">
            1Îã®Í≥Ñ: Î∏îÎ°úÍ∑∏ ÏàòÏßë
          </TabsTrigger>
          <TabsTrigger value="step2" disabled={step1Blogs.length === 0}>
            2Îã®Í≥Ñ: ÌÇ§ÏõåÎìú API
          </TabsTrigger>
          <TabsTrigger value="step3" disabled={step2Blogs.length === 0}>
            3Îã®Í≥Ñ: ÏßÄÏàò ÌôïÏù∏
          </TabsTrigger>
        </TabsList>

        {/* 1Îã®Í≥Ñ Í≤∞Í≥º */}
        <TabsContent value="step1" className="space-y-4">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle className="flex items-center gap-2">
                    <Database className="h-5 w-5" />
                    1Îã®Í≥Ñ Î∏îÎ°úÍ∑∏ ({step1Blogs.length}Í∞ú)
                  </CardTitle>
                  <CardDescription>
                    Ï≤´ÌéòÏù¥ÏßÄÏóêÏÑú ÏàòÏßëÎêú Î∏îÎ°úÍ∑∏ Î™©Î°ù
                  </CardDescription>
                </div>
                {step1Blogs.length > 0 && (
                  <div className="flex items-center gap-2 ml-4">
                    <Button 
                      onClick={handleBulkActivation}
                      disabled={step2Loading || step1Blogs.every(blog => step2Blogs.includes(blog.id))}
                      size="sm"
                      data-testid="button-bulk-activate"
                    >
                      {step2Loading ? (
                        <>
                          <Loader2 className="h-4 w-4 animate-spin mr-2" />
                          ÏùºÍ¥Ñ ÌôúÏÑ±Ìôî Ï§ë...
                        </>
                      ) : step1Blogs.every(blog => step2Blogs.includes(blog.id)) ? (
                        "Î™®Îëê ÌôúÏÑ±ÌôîÎê®"
                      ) : (
                        "Î™®Îëê ÌôúÏÑ±Ìôî"
                      )}
                    </Button>
                    <Button
                      onClick={handleTitleScraping}
                      variant="outline"
                      size="sm"
                      data-testid="button-title-scraping"
                    >
                      Ï†úÎ™© Í∏ÅÏñ¥Ïò§Í∏∞
                    </Button>
                  </div>
                )}
              </div>
            </CardHeader>
            <CardContent>
              {step1Blogs.length > 0 ? (
                <div className="space-y-4">
                  {step1Blogs.map((blog) => (
                    <div key={blog.id} className="border rounded-lg p-4" data-testid={`blog-step1-${blog.id}`}>
                      <div className="flex items-center justify-between">
                        <div className="space-y-2">
                          <div className="flex items-center gap-2">
                            <h4 className="font-medium">{blog.blogName}</h4>
                            <span className="text-gray-400">/</span>
                            <button
                              onClick={() => window.open(blog.blogUrl, '_blank', 'noopener,noreferrer')}
                              className="p-1 hover:bg-gray-100 rounded transition-colors"
                              title="Î∏îÎ°úÍ∑∏ ÏÉàÏ∞ΩÏóêÏÑú Ïó¥Í∏∞"
                              data-testid={`button-open-blog-${blog.id}`}
                            >
                              <ExternalLink className="h-4 w-4 text-blue-600" />
                            </button>
                            {blog.title && blog.title !== `${blog.blogName}Ïùò Ïù∏ÌîåÎ£®Ïñ∏ÏÑú` && blog.title !== `${blog.blogName}Ïùò Ìè¨Ïä§Ìä∏` && (
                              <span className="text-gray-700 text-sm">{blog.title}</span>
                            )}
                          </div>
                          <div className="flex items-center gap-4 text-sm text-gray-600">
                            <span>ÏàúÏúÑ: {blog.blogType === 'top_exposure' ? `ÏÉÅÏúÑÎÖ∏Ï∂ú ${blog.rank}ÏúÑ` : `ÏÑúÏπòÌîºÎìú ${blog.rank}ÏúÑ`}</span>
                            <span>Ï°∞ÌöåÎüâ: {blog.volume?.toLocaleString()}</span>
                            <span>Ï†êÏàò: {blog.score}Ï†ê</span>
                            <Badge variant={blog.blogType === "top_exposure" ? "default" : "secondary"}>
                              {blog.blogType === 'top_exposure' ? 'ÏÉÅÏúÑÎÖ∏Ï∂ú' : 'ÏÑúÏπòÌîºÎìú'}
                            </Badge>
                          </div>
                        </div>
                        <Button 
                          onClick={() => handleStep2Process(blog.id)}
                          disabled={step2Loading || step2Blogs.includes(blog.id)}
                          size="sm"
                          data-testid={`button-step2-${blog.id}`}
                        >
                          {step2Loading ? (
                            <Loader2 className="h-4 w-4 animate-spin" />
                          ) : step2Blogs.includes(blog.id) ? (
                            "ÌôúÏÑ±ÌôîÎê®"
                          ) : (
                            "ÌÇ§ÏõåÎìú API ÌôúÏÑ±Ìôî"
                          )}
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-gray-500 text-center py-8">
                  ÌÇ§ÏõåÎìúÎ•º Í≤ÄÏÉâÌïòÏó¨ Î∏îÎ°úÍ∑∏Î•º ÏàòÏßëÌï¥Ï£ºÏÑ∏Ïöî
                </p>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* 2Îã®Í≥Ñ Í≤∞Í≥º */}
        <TabsContent value="step2" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileText className="h-5 w-5" />
                2Îã®Í≥Ñ: ÌÇ§ÏõåÎìú API ÌôúÏÑ±Ìôî ({step2Blogs.length}Í∞ú Ï≤òÎ¶¨Îê®)
              </CardTitle>
              <CardDescription>
                Î∏îÎ°úÍ∑∏ ÏµúÏã†Í∏ÄÏóêÏÑú ÌÇ§ÏõåÎìúÎ•º Ï∂îÏ∂úÌïòÍ≥† Î∂ÑÏÑùÌï©ÎãàÎã§
              </CardDescription>
              {step2Blogs.length > 0 && step2Blogs.length < step1Blogs.length && (
                <div className="flex items-center gap-2">
                  <Button 
                    onClick={handleBulkStep2Analysis}
                    disabled={step2Loading}
                    size="sm"
                    data-testid="button-bulk-step2-analysis"
                  >
                    {step2Loading ? (
                      <>
                        <Loader2 className="h-4 w-4 animate-spin mr-2" />
                        ÏùºÍ¥Ñ ÌÇ§ÏõåÎìú Î∂ÑÏÑù Ï§ë...
                      </>
                    ) : (
                      "ÎÇ®ÏùÄ Î∏îÎ°úÍ∑∏ ÏùºÍ¥Ñ ÌÇ§ÏõåÎìú Î∂ÑÏÑù"
                    )}
                  </Button>
                </div>
              )}
            </CardHeader>
            <CardContent>
              {step2Blogs.length > 0 ? (
                <div className="space-y-4">
                  {step2Blogs.map((blogId) => {
                    const blog = step1Blogs.find(b => b.id === blogId);
                    const result = step2Results.find(r => r.blogId === blogId);
                    return (
                      <div key={blogId} className="border rounded-lg p-4" data-testid={`blog-step2-${blogId}`}>
                        <div className="flex items-center justify-between">
                          <div className="space-y-2 flex-1">
                            <h4 className="font-medium">{blog?.blogName} - ÌÇ§ÏõåÎìú Ï∂îÏ∂ú ÏôÑÎ£å</h4>
                            {result && result.topKeywords && result.topKeywords.length > 0 ? (
                              <div className="space-y-2">
                                <div className="text-sm text-gray-600">
                                  ÏÑ†Ï†ïÎêú ÏÉÅÏúÑ {result.topKeywords.length}Í∞ú ÌÇ§ÏõåÎìú:
                                </div>
                                <div className="flex flex-wrap gap-2">
                                  {result.topKeywords.map((kw: any, idx: number) => (
                                    <div key={idx} className="bg-blue-50 border border-blue-200 rounded-lg px-3 py-2 text-sm">
                                      <div className="flex items-center gap-1">
                                        <span className="font-medium">{idx + 1}. {kw.text || kw.keyword}</span>
                                        {kw.isCombo && <span className="text-blue-600 text-xs">(Ï°∞Ìï©)</span>}
                                      </div>
                                      <div className="flex items-center gap-3 text-xs text-gray-600 mt-1">
                                        <span className="flex items-center gap-1">
                                          üìà {(kw.volume || 0).toLocaleString()}
                                        </span>
                                        <span className="flex items-center gap-1">
                                          ‚≠ê {kw.score || kw.cpc || 0}
                                        </span>
                                        {kw.position && (
                                          <span className="text-blue-600">#{kw.position}ÏúÑ</span>
                                        )}
                                      </div>
                                    </div>
                                  ))}
                                </div>
                              </div>
                            ) : (
                              <div className="text-sm text-gray-600">
                                Ï†úÎ™©ÏóêÏÑú ÌÇ§ÏõåÎìúÎ•º Ï∂îÏ∂úÌïòÍ≥† Ï°∞ÌöåÎüâ Î∞è Í≤ΩÏüÅÎèÑÎ•º Î∂ÑÏÑùÌñàÏäµÎãàÎã§
                              </div>
                            )}
                          </div>
                          <Button 
                            onClick={() => handleStep3Check(blogId)}
                            disabled={step3Loading || step3Blogs.includes(blogId)}
                            size="sm"
                            data-testid={`button-step3-${blogId}`}
                          >
                            {step3Loading ? (
                              <Loader2 className="h-4 w-4 animate-spin" />
                            ) : step3Blogs.includes(blogId) ? (
                              "ÏßÄÏàò ÌôïÏù∏Îê®"
                            ) : (
                              "Î∏îÎ°úÍ∑∏ ÏßÄÏàò ÌôïÏù∏"
                            )}
                          </Button>
                        </div>
                      </div>
                    );
                  })}
                </div>
              ) : (
                <p className="text-gray-500 text-center py-8">
                  1Îã®Í≥ÑÏóêÏÑú Î∏îÎ°úÍ∑∏Î•º ÏÑ†ÌÉùÌïòÍ≥† "ÌÇ§ÏõåÎìú API ÌôúÏÑ±Ìôî" Î≤ÑÌäºÏùÑ ÎàåÎü¨Ï£ºÏÑ∏Ïöî
                </p>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* 3Îã®Í≥Ñ Í≤∞Í≥º */}
        <TabsContent value="step3" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <TrendingUp className="h-5 w-5" />
                3Îã®Í≥Ñ: Î∏îÎ°úÍ∑∏ ÏßÄÏàò ÌôïÏù∏ ({step3Blogs.length}Í∞ú ÌôïÏù∏Îê®)
              </CardTitle>
              <CardDescription>
                ÌÇ§ÏõåÎìúÏùò Ïã§Ï†ú ÎÖ∏Ï∂ú ÏàúÏúÑÎ•º ÌôïÏù∏Ìï©ÎãàÎã§
              </CardDescription>
            </CardHeader>
            <CardContent>
              {step3Blogs.length > 0 ? (
                <div className="space-y-4">
                  {step3Blogs.map((blogId) => {
                    const blog = step1Blogs.find(b => b.id === blogId);
                    const result = step3Results.find(r => r.blogId === blogId);
                    return (
                      <div key={blogId} className="border rounded-lg p-4" data-testid={`blog-step3-${blogId}`}>
                        <div className="space-y-2">
                          <h4 className="font-medium" data-testid={`text-blog-name-${blogId}`}>
                            {blog?.blogName} - ÏßÄÏàò ÌôïÏù∏ ÏôÑÎ£å
                          </h4>
                          <div className="text-sm text-gray-600" data-testid={`text-description-${blogId}`}>
                            ÌÇ§ÏõåÎìúÎ≥Ñ ÎÑ§Ïù¥Î≤Ñ Î™®Î∞îÏùº ÎÖ∏Ï∂ú ÏàúÏúÑÍ∞Ä ÌôïÏù∏ÎêòÏóàÏäµÎãàÎã§
                          </div>
                          <div className="flex gap-2">
                            {result ? (
                              <>
                                <Badge 
                                  variant={result.isRanked ? "default" : "secondary"} 
                                  className={result.isRanked ? "text-green-600" : "text-gray-600"}
                                  data-testid={`badge-status-${blogId}`}
                                >
                                  {result.isRanked ? `${result.ranking}ÏúÑ ÏßÑÏûÖ` : "ÏàúÏúÑ ÎØ∏ÏßÑÏûÖ"}
                                </Badge>
                                <Badge variant="outline" className="text-blue-600" data-testid={`badge-details-${blogId}`}>
                                  {result.details || "ÏàúÏúÑ ÌôïÏù∏ ÏôÑÎ£å"}
                                </Badge>
                                {result.error && (
                                  <Badge variant="destructive" data-testid={`badge-error-${blogId}`}>
                                    Ïò§Î•ò Î∞úÏÉù
                                  </Badge>
                                )}
                              </>
                            ) : (
                              <Badge variant="outline" data-testid={`badge-processing-${blogId}`}>
                                Ï≤òÎ¶¨ Ï§ë...
                              </Badge>
                            )}
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              ) : (
                <p className="text-gray-500 text-center py-8">
                  2Îã®Í≥Ñ ÏôÑÎ£å ÌõÑ Ïù¥Ïö© Í∞ÄÎä•Ìï©ÎãàÎã§
                </p>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}